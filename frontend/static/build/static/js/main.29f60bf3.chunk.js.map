{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","display_name","avatar","preview","handleInput","bind","handleImage","handleSubmit","e","this","setState","target","name","value","file","files","reader","FileReader","onloadend","result","readAsDataURL","a","preventDefault","formData","FormData","append","options","method","headers","Cookies","get","body","fetch","response","console","log","onSubmit","type","onChange","src","alt","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSA2EeA,E,kDAtEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACCC,MAAQ,CACXC,aAAc,GACdC,OAAQ,KACRC,QAAS,IAEX,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBATL,E,+CAWnB,SAAYG,GACVC,KAAKC,SAAL,eAAiBF,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,U,yBAE5C,SAAYL,GAAG,IAAD,OACRM,EAAON,EAAEG,OAAOI,MAAM,GAC1BN,KAAKC,SAAL,eACGF,EAAEG,OAAOC,KAAOE,IAOnB,IAAIE,EAAS,IAAIC,WACjBD,EAAOE,UAAY,WACjB,EAAKR,SAAS,CACZP,QAASa,EAAOG,UAGpBH,EAAOI,cAAcN,K,iEAIvB,WAAmBN,GAAnB,mBAAAa,EAAA,6DACEb,EAAEc,kBACEC,EAAW,IAAIC,UAEVC,OAAO,SAAUhB,KAAKT,MAAME,QACrCqB,EAASE,OAAO,eAAgBhB,KAAKT,MAAMC,cAC3CsB,EAASE,OAAO,OAAQ,GAElBC,EAAU,CACdC,OAAQ,OACRC,QAAS,CACP,cAAeC,IAAQC,IAAI,cAE7BC,KAAMR,GAbV,SAgB0BS,MAAO,0BAA2BN,GAhB5D,OAgBQO,EAhBR,OAiBEC,QAAQC,IAAIF,GAjBd,iD,2EAoBA,WACA,OACE,uBAAMG,SAAU3B,KAAKF,aAArB,UACE,uBAAO8B,KAAK,OAAOzB,KAAK,eAAeC,MAAOJ,KAAKT,MAAMC,aAAcqC,SAAU7B,KAAKL,cACtF,uBAAOiC,KAAK,OAAOzB,KAAK,SAAS0B,SAAU7B,KAAKH,cAE/CG,KAAKT,MAAME,OACR,qBAAKqC,IAAK9B,KAAKT,MAAMG,QAASqC,IAAI,KAClC,KAEF,wBAAQH,KAAK,SAAb,kC,GAjEUI,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.29f60bf3.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './App.css';\nimport Cookies from 'js-cookie';\n\nclass App extends Component{\n  constructor(props) {\n    super(props);\n      this.state = {\n        display_name: '',\n        avatar: null,\n        preview: '',\n      }\n      this.handleInput = this.handleInput.bind(this);\n      this.handleImage = this.handleImage.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleInput(e){\n    this.setState({ [e.target.name]: e.target.value });\n  }\n  handleImage(e){\n    let file = e.target.files[0];\n    this.setState({\n      [e.target.name]: file,\n      // same as:   avatar: file,\n      // specifically targeting the first file (index- 0). Take the file we selected and set that on state.\n    // the way to target what we select is going to be with the files attribute\n    });\n\n        // this will allow us to asynchronously read a file. In this case it allows us to read a file.  Then we tell it what to do when it's finished reading:\n    let reader = new FileReader();\n    reader.onloadend = () => {\n      this.setState({\n        preview: reader.result,\n      });\n  }\n    reader.readAsDataURL(file);\n      // this gives us back a data url that we can use as a src attribute on our image tag. Using this as an src below to show the image to the client.\n  }\n\n  async handleSubmit(e) {\n    e.preventDefault();\n    let formData = new FormData();\n    // using formData bc we're sending up JSON & the images. This is a constructor, allows us to write key/value pairs.\n    formData.append('avatar', this.state.avatar);\n    formData.append('display_name', this.state.display_name);\n    formData.append('user', 1);  // this is hardcoded- admin has id of 1\n\n    const options = {\n      method: 'POST',\n      headers: {\n        'X-CSRFToken': Cookies.get('csrftoken'),\n      },\n      body: formData,\n      //hard coding the above for right now\n    }\n    const response =  await fetch ('/api/v1/users/profiles/', options);\n    console.log(response);\n  }\n\n  render(){\n  return (\n    <form onSubmit={this.handleSubmit}>\n      <input type=\"text\" name=\"display_name\" value={this.state.display_name} onChange={this.handleInput}/>\n      <input type=\"file\" name=\"avatar\" onChange={this.handleImage}/>\n\n      {this.state.avatar\n        ? <img src={this.state.preview} alt=\"\"/>\n        : null\n      }\n        <button type=\"submit\">Save Profile!</button>\n    </form>\n  );\n}\n}\n\nexport default App;\n\n\n// implement authetication.  Can override the perform create like last week.\n// a user can only create one profile- implement logic to say that you can only create a profile once, but you can edit it as much as you want (put request to edit).   If they don't have a profile- do a POST request to CREATE profile.\n// override to say the person making the request is the one we need to create a profile for- override the perform create \n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}